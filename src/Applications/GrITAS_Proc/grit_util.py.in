#!/usr/bin/env python3

import os
import yaml
import pandas as pd

class calendar:
    '''
    Alias class to Pandas.date_range

    Attributes
    ----------
    dates : Pandas date_range instance
        Accepts beginning end of date range, with optional frequency

    years : list
        List of years in dates

    months : list
        List of months in dates

    days : list
        List of days in dates
    '''

    def __init__(self,beg,end,freq='MS'):
        self.dates = pd.date_range(start=beg,end=end,freq=freq)
        self.years = self.dates.year
        self.months = self.dates.month
        self.days = self.dates.day

class Gritas:
    '''
    GrITAS Driver Class

    Attributes
    ----------
    dateStart: str
        Global start date of observations

    dateEnd: str
        Global end date of observations

    conf: float
        Confidence in measurements

    instruments: list
        List of instruments

    dryRun : bool
        Whether this is a dry run

    expId : str
        Experiment ID

    expDir : str
        Experiment directory structure

    outDir : str
        Output directory

    rcLoc : str
        Resource (*rc) file location

    resids : list
        List of residuals metrics (e.g. O-A, O-F, etc.)

    ioptions : str
        CL options to read a resource (rc) file

    woptions : str
        CL options to create netCDF directory structure

    nc4 : str
        NetCDF file wherein gritas will dump statistics

    Methods
    -------
    iopts(res,instr)
        Sets input options to read a resource (rc) file

    wopts(res,yr,mm)
        Sets output options to ensure directory structure exists for storing generated netCDF files

    nc4Opts(instr)
        Sets the name of nc4 file generated upon gritas execution.\n This method is crucial for conventional (conv) observations, which rely on the same ods file but are produced from distinct observational instruments

    out(File,instr)
        Sets final I/O options to gritas executable,\n defining which Observation Data Stream (ODS) file to read and formatting options for gritas output
    '''

    def __init__(self,yaml):
        '''
        Initialize a gritas instance

        Parameters
        ----------
        yml : str
            YAML config file
        '''
        self.yml=yaml
        self.dateStart=''
        self.dateEnd=''
        self.conf=''
        self.instruments=[]
        self.dryRun=False
        self.expId=''
        self.expDir=''
        self.outDir=''
        self.rcLoc=''
        self.resids=[]
        self.ioptions=''
        self.woptions=''
        self.nc4=''

        self.__parse__()

    def __parse__(self):
        '''
        Opens and parses a passed YAML file

        Sets all default parameters of GrITAS driver
        '''
        valsYML=None
        with open(self.yml, 'r') as f:
            valsYML = yaml.load(f, Loader=yaml.FullLoader)

        self.dateStart, self.dateEnd, self.conf = tuple(valsYML['global'].values())
        self.instruments = valsYML['instruments']
        self.dryRun = valsYML['dryrun']
        self.expId = valsYML['expid']
        self.expDir = valsYML['expdir']
        self.outDir = valsYML['outdir']
        self.rcLoc = valsYML['rc location']
        self.resids = valsYML['residuals']

    def __exe__(self,cmd):
        '''
        Prints cmd if dryRun == True, else execute cmd within terminal

        Parameters
        ----------
        cmd : str
            Command passed as string
        '''
        print(cmd) if self.dryRun else os.popen(cmd).read()


    def iopts(self,res,instr):
        '''
        Set input options to read an resource (rc) file

        Parameters
        ----------
        res : str
            Residual read from yaml file for this set of measurements

        instr : str
            Instrument read from yaml file for this set of measurements
        '''
        self.ioptions = ' -nopassive -%s -rc %s'%(res,os.path.join(self.rcLoc,'gritas_%s.rc'%instr))
        if self.conf > 0.0: self.ioptions += ' -conf %s'%self.conf

    def wopts(self,res,yr,mm,dd,yr_f=None,mm_f=None,dd_f=None):
        '''
        Set output options to ensure directory structure exists for storing generated netCDF files

        Parameters
        ----------
        res : str
            Residual read from yaml file for this set of measurements

        yr : str
            A calendar year

        mm : str
            A standard right-justified, two-digit month

        dd : str
            A standard right-justified, two-digit day

        yr_f : str
            Optional future calendar year

        mm_f : str
            Optional future calendar month

        dd_f : str
            Optional future calendar day
        '''
        self.woptions = '%s/%s/%s%s%s'%(self.outDir,res,yr,mm,dd)

        # If future calendar entities are non-empty strings, expand woptions to express date range
        if yr_f and mm_f and dd_f:
            self.woptions += '-%s%s%s'%(yr_f,mm_f,dd_f)
        self.__exe__('mkdir -p %s'%self.woptions)

    def nc4Opts(self,instr):
        '''
        Set name of nc4 file generated upon gritas execution

        Parameters
        ----------
        instr : str
            ODS instrument
        '''
        self.nc4 = ' -o %s/%s_gritas'%(self.woptions,instr)


    def out(self,Files,instr):
        '''
        Set final I/O options to gritas executable\n Defines which Observation Data Stream (ODS) file to read and formatting options for gritas output

        Parameters
        ----------
        Files : str
            ODS gridded measurement file prefix

        instr : str
            ODS instrument whose data is to be parsed
        '''
        iargs = '%s%s*.ods '%(Files[0],instr)
        for f in Files[1:]:
            iargs += '%s%s*.ods '%(f,instr)

        self.__exe__('%s %s%s %s'%(os.path.join('CMAKE_INSTALL_PREFIX','bin','gritas.x'),self.ioptions,self.nc4,iargs))
